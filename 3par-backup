#!/bin/bash
IP=$1
PATTERN=$2
JOBS=${JOBS:-3}
FIRST_LUN=${FIRST_LUN:-100}
CMD=${CMD:-'set -x; dd if=$DEV of=$VV status=progress bs=16M'}

if [ -z "$PATTERN" ]; then
  echo "Usage: $0 <3par> <pattern>"
  exit 1
fi

backup_vvs() {
  IP=$IP HOST=$HOST CMD=$CMD RPORTALS=$RPORTALS bash -s -- "$@" <<\EOT
    LUN=$1
    shift

    cleanup() {
      # detach
      ISCSI_DISKS=$(iscsiadm -m session -P3 | grep "Lun: $LUN$" -A1 | awk '/Attached scsi disk/ {print $4}')
      unset device
      for device in ${ISCSI_DISKS}; do
        if [ -b /dev/${device} ] && fdisk -l /dev/${device} 2>&1 | grep -q 'No such file or directory'; then
            blockdev --flushbufs /dev/${device}
            echo 1 > /sys/block/${device}/device/delete
        fi
      done
    }

    rescan_iscsi_portals() {
        while read SID LPORTAL; do
          for RPORTAL in $RPORTALS; do
            if [ "$LPORTAL" = "$RPORTAL" ]; then
              iscsiadm -m session --rescan -r $SID
            fi
          done
        done < <(iscsiadm -m session | awk '{gsub(/[\[\]]/, "", $2); gsub(/:.*/, "", $3); print $2 " " $3}')
    }

    trap 'cleanup; rescan_iscsi_portals' EXIT

    for VV in "$@"; do
      # cleanup broken devices (just in case)
      OLD_VVS=$(ssh "3paradm@$IP" showvlun -host "$HOST" </dev/null | awk "\$1 == $LUN && \$NF == \"host\" {print \$2}" )
      for OLD_VV in $OLD_VVS; do
        ssh "3paradm@$IP" removevlun -f "$OLD_VV" "$LUN" "$HOST"
        rescan_iscsi_portals
      done

      cleanup

      ssh "3paradm@$IP" removevv -f "$VV-backup" 2>/dev/null

      # attach
      ssh "3paradm@$IP" createsv -f -ro -exp 7d "$VV-backup" "$VV"
      ssh "3paradm@$IP" createvlun -f "$VV-backup" "$LUN" "$HOST"
      WWN=$(ssh "3paradm@$IP" showvv -showcols VV_WWN "$VV-backup" </dev/null | awk 'FNR == 2 {print tolower($1)}')
      DEV="/dev/disk/by-id/wwn-0x$WWN"

      rescan_iscsi_portals >/dev/null
      ISCSI_DISKS=$(iscsiadm -m session -P3 | grep "Lun: $LUN$" -A1 | awk '/Attached scsi disk/ {print $4}')


      echo "Waiting for $DEV"
      ticker=0
      until dd if="$DEV" of=/dev/null bs=1 count=1 >/dev/null 2>&1; do
        sleep 1
        if [ $((ticker++)) -ge 60 ]; then
          echo "Error: $DEV for $VV is not readable!"
          continue 2
        fi
      done
      echo "Device $DEV for $VV found and readable"

      echo Processing $DEV backup for $VV
      echo "$CMD" | DEV="/dev/disk/by-id/wwn-0x$WWN" LUN=$LUN VV=$VV HOST=$HOST IP=$IP CMD=$CMD bash -s
      cleanup

      ssh "3paradm@$IP" removevlun -f "$VV-backup" "$LUN" "$HOST"
      ssh "3paradm@$IP" removevv -f "$VV-backup"
    done
EOT
}

# Setup host
INITIATOR_NAME=$(awk -F= '{print $2}' /etc/iscsi/initiatorname.iscsi)
HOST=$(hostname -s)

if [ -z "$INITIATOR_NAME" ] || [ -z "$HOST" ] || [ -z "$IP" ]; then
  echo "INITIATOR_NAME, HOST or IP is empty!" >&2
  exit 1
fi

ssh "3paradm@$IP" createhost -iscsi "$HOST" "$INITIATOR_NAME"

# ---------------------------

RPORTALS=$(ssh "3paradm@$IP" showport -iscsivlans | tail -n+2 | head -n-2 | awk '{print $3}')
LPORTALS=$(sudo iscsiadm -m session -o show | awk -F '[ :,]+' '{print $3}')

# iSCSI login
for RPORTAL in $RPORTALS; do
  for LPORTAL in $LPORTALS; do
    if [ "$LPORTALS" = "$RPORTAL" ]; then
      continue 2
    fi
  done
  sudo iscsiadm -m discovery -t sendtargets -p "$RPORTAL"
  sudo iscsiadm -m node -l all -p "$RPORTAL"
done

VVS=$(set -x; ssh "3paradm@$IP" showvv -showcols Name "$PATTERN" | head -n-2 | tail -n+2 | grep -v '\-backup ')

# Set traps to kill background processes
trap "exit" INT TERM
trap "kill 0" EXIT

# Perform backup
for j in $(seq 1 $JOBS); do
  LUN=$(($FIRST_LUN+$j-1))
  LUN_VVS=$(echo "$VVS" | awk -v COUNT="$JOBS" -v i="$j" '{f=(f%COUNT)+1 ; if (f == i) { print $0 } }')
  echo "Starting job on LUN=$LUN:" $LUN_VVS
  backup_vvs "$LUN" $LUN_VVS &
done

wait

rescan_iscsi_portals

# iSCSI logout
sudo iscsiadm -m session -o show | while read _ _ LPORTAL _; do
  for RPORTAL in $RPORTALS; do
    if [ "$LPORTAL" = "$RPORTAL" ]; then
      sudo iscsiadm --mode node -u -p "$RPORTAL"
    fi
  done
done

ssh "3paradm@$IP" removehost "$HOST"
